{"ast":null,"code":"import axios from \"axios\";\n\n// Spoonacular API key\nconst apiKey = \"7f657ea48d85402e9ea4904e9822fc47\";\nconst baseURL = \"https://api.spoonacular.com\";\n\n// Function to fetch random recipes\nexport const fetchRandomRecipes = async (number = 6) => {\n  try {\n    const url = `${baseURL}/recipes/random?apiKey=${apiKey}&number=${number}`;\n    const response = await axios.get(url);\n    console.log(response.data.recipes);\n    return response.data.recipes;\n  } catch (error) {\n    console.error(\"Error fetching random recipes:\", error.message);\n    throw error;\n  }\n};\n\n// Function to fetch recipes based on ingredients\nexport const fetchRecipesByIngredients = async ingredients => {\n  try {\n    const url = `${baseURL}/recipes/findByIngredients?apiKey=${apiKey}&ingredients=${ingredients}`;\n    const response = await axios.get(url);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recipes by ingredients:\", error.message);\n    throw error;\n  }\n};\nexport const fetchRecipesExcludingIngredients = async (ingredients, excludeIngredients) => {\n  try {\n    // Ensure ingredients and excludeIngredients are not empty\n    if (!ingredients) {\n      throw new Error(\"Please provide ingredients to search for.\");\n    }\n\n    // Format the ingredients and excludeIngredients as comma-separated lists\n    const formattedIngredients = ingredients.split(',').map(item => item.trim()).join(',');\n    const formattedExcludeIngredients = excludeIngredients.split(',').map(item => item.trim()).join(',');\n\n    // Log the formatted ingredients and exclusions to check if they're correct\n    console.log(\"Formatted Ingredients:\", formattedIngredients);\n    console.log(\"Formatted Excluded Ingredients:\", formattedExcludeIngredients);\n\n    // URL-encode the formatted ingredients and excludeIngredients strings\n    const encodedIngredients = encodeURIComponent(formattedIngredients);\n    const encodedExcludeIngredients = encodeURIComponent(formattedExcludeIngredients);\n\n    // Build the request URL for excluding ingredients\n    const url = `${baseURL}/recipes/findByIngredients?apiKey=${apiKey}&ingredients=${encodedIngredients}&excludeIngredients=${encodedExcludeIngredients}`;\n    console.log(\"Request URL:\", url); // Log the full URL to check the query\n\n    const response = await axios.get(url);\n    console.log(\"API Response Data:\", response.data); // Log the response data\n\n    // Check if any recipes are returned\n    if (response.data.length === 0) {\n      console.warn(\"No recipes found with the given ingredients and exclusions.\");\n    }\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recipes excluding ingredients:\", error.message);\n    throw error;\n  }\n};\n\n// Function to fetch meal plan\nexport const fetchMealPlan = async () => {\n  try {\n    const url = `${baseURL}/mealplanner/generate?apiKey=${apiKey}&timeFrame=day`;\n    const response = await axios.get(url);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching meal plan:\", error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","apiKey","baseURL","fetchRandomRecipes","number","url","response","get","console","log","data","recipes","error","message","fetchRecipesByIngredients","ingredients","fetchRecipesExcludingIngredients","excludeIngredients","Error","formattedIngredients","split","map","item","trim","join","formattedExcludeIngredients","encodedIngredients","encodeURIComponent","encodedExcludeIngredients","length","warn","fetchMealPlan"],"sources":["/Users/ryanmexin/React Project website/To do list/src/utils/foodApi.js"],"sourcesContent":["import axios from \"axios\";\n\n// Spoonacular API key\nconst apiKey = \"7f657ea48d85402e9ea4904e9822fc47\";\nconst baseURL = \"https://api.spoonacular.com\";\n\n// Function to fetch random recipes\nexport const fetchRandomRecipes = async (number = 6) => {\n  try {\n    const url = `${baseURL}/recipes/random?apiKey=${apiKey}&number=${number}`;\n    const response = await axios.get(url);\n    console.log(response.data.recipes);\n    return response.data.recipes;\n  } catch (error) {\n    console.error(\"Error fetching random recipes:\", error.message);\n    throw error;\n  }\n};\n\n// Function to fetch recipes based on ingredients\nexport const fetchRecipesByIngredients = async (ingredients) => {\n  try {\n    const url = `${baseURL}/recipes/findByIngredients?apiKey=${apiKey}&ingredients=${ingredients}`;\n    const response = await axios.get(url);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recipes by ingredients:\", error.message);\n    throw error;\n  }\n};\n\nexport const fetchRecipesExcludingIngredients = async (ingredients, excludeIngredients) => {\n  try {\n    // Ensure ingredients and excludeIngredients are not empty\n    if (!ingredients) {\n      throw new Error(\"Please provide ingredients to search for.\");\n    }\n\n    // Format the ingredients and excludeIngredients as comma-separated lists\n    const formattedIngredients = ingredients.split(',').map(item => item.trim()).join(',');\n    const formattedExcludeIngredients = excludeIngredients.split(',').map(item => item.trim()).join(',');\n\n    // Log the formatted ingredients and exclusions to check if they're correct\n    console.log(\"Formatted Ingredients:\", formattedIngredients);\n    console.log(\"Formatted Excluded Ingredients:\", formattedExcludeIngredients);\n\n    // URL-encode the formatted ingredients and excludeIngredients strings\n    const encodedIngredients = encodeURIComponent(formattedIngredients);\n    const encodedExcludeIngredients = encodeURIComponent(formattedExcludeIngredients);\n\n    // Build the request URL for excluding ingredients\n    const url = `${baseURL}/recipes/findByIngredients?apiKey=${apiKey}&ingredients=${encodedIngredients}&excludeIngredients=${encodedExcludeIngredients}`;\n\n    console.log(\"Request URL:\", url); // Log the full URL to check the query\n\n    const response = await axios.get(url);\n\n    console.log(\"API Response Data:\", response.data); // Log the response data\n\n    // Check if any recipes are returned\n    if (response.data.length === 0) {\n      console.warn(\"No recipes found with the given ingredients and exclusions.\");\n    }\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recipes excluding ingredients:\", error.message);\n    throw error;\n  }\n};\n\n\n\n\n// Function to fetch meal plan\nexport const fetchMealPlan = async () => {\n  try {\n    const url = `${baseURL}/mealplanner/generate?apiKey=${apiKey}&timeFrame=day`;\n    const response = await axios.get(url);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching meal plan:\", error.message);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}