{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmexin/React Project website/To do list/src/components/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchWeatherData as fetchWeatherDataApi, fetchWeatherForecast as fetchWeatherForecastApi } from \"../utils/WeatherApi\"; // Import the API functions\nimport \"../Weather.css\"; // Optional styling for weather\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Weather() {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null); // To store forecast data\n  const [location, setLocation] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [isFahrenheit, setIsFahrenheit] = useState(false); // State to toggle between F and C\n\n  // Fetch weather data and forecast when the location is changed\n  useEffect(() => {\n    if (location) {\n      getWeatherData(location);\n      getWeatherForecast(location);\n    }\n  }, [location]);\n\n  // Function to fetch weather data\n  const getWeatherData = async location => {\n    try {\n      const data = await fetchWeatherDataApi(location);\n      setWeatherData(data);\n      setError(null); // Reset error state\n    } catch (err) {\n      setError(\"Error fetching weather data.\");\n      setWeatherData(null);\n    }\n  };\n\n  // Function to fetch weather forecast\n  const getWeatherForecast = async location => {\n    try {\n      const forecast = await fetchWeatherForecastApi(location);\n      console.log(\"Forecast Data:\", forecast); // Add logging to check the data\n      setForecastData(forecast);\n    } catch (err) {\n      setError(\"Error fetching forecast data.\");\n      setForecastData(null);\n    }\n  };\n\n  // Function to convert Celsius to Fahrenheit\n  const convertToFahrenheit = celsius => {\n    return celsius * 9 / 5 + 32;\n  };\n\n  // Function to convert Fahrenheit to Celsius\n  const convertToCelsius = fahrenheit => {\n    return (fahrenheit - 32) * 5 / 9;\n  };\n\n  // Function to convert temperature correctly\n  const getTemperature = tempCelsius => {\n    if (isNaN(tempCelsius)) return \"N/A\"; // Handle invalid or missing data\n\n    // Convert temperature based on the selected unit\n    const temperature = isFahrenheit ? convertToFahrenheit(tempCelsius) : tempCelsius;\n\n    // Return temperature as-is if it is above 0; otherwise, keep it negative\n    return temperature > 0 ? temperature.toFixed(1) : `(${Math.abs(temperature).toFixed(1)})`;\n  };\n\n  // Handle search form submission\n  const handleSearch = e => {\n    e.preventDefault();\n    if (location) {\n      getWeatherData(location);\n      getWeatherForecast(location);\n    }\n  };\n\n  // Toggle between Fahrenheit and Celsius\n  const toggleTemperatureUnit = () => {\n    setIsFahrenheit(!isFahrenheit);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"weather-title\",\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      className: \"weather-search-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a city\",\n        value: location,\n        onChange: e => setLocation(e.target.value),\n        className: \"weather-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"weather-search-btn\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [weatherData.name, \", \", weatherData.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", getTemperature(weatherData.main.temp), \"\\xB0\", isFahrenheit ? \"F\" : \"C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Conditions: \", weatherData.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", weatherData.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind Speed: \", weatherData.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), forecastData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-forecast\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"5-Day Forecast:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), forecastData.list.slice(0, 5).map((forecast, index) => {\n        const temp = forecast.main.temp; // Extract temperature (already in Celsius)\n        console.log(`Forecast Temp at index ${index}:`, temp); // Log the temperature to check\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [new Date(forecast.dt * 1000).toLocaleDateString(), \" -\", getTemperature(temp), \"\\xB0\", isFahrenheit ? \"F\" : \"C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleTemperatureUnit,\n      className: \"unit-toggle-btn\",\n      children: isFahrenheit ? \"Switch to Celsius\" : \"Switch to Fahrenheit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(Weather, \"WejUv/ANgvB1FVf2uMugtBEi83A=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","fetchWeatherData","fetchWeatherDataApi","fetchWeatherForecast","fetchWeatherForecastApi","jsxDEV","_jsxDEV","Weather","_s","weatherData","setWeatherData","forecastData","setForecastData","location","setLocation","error","setError","isFahrenheit","setIsFahrenheit","getWeatherData","getWeatherForecast","data","err","forecast","console","log","convertToFahrenheit","celsius","convertToCelsius","fahrenheit","getTemperature","tempCelsius","isNaN","temperature","toFixed","Math","abs","handleSearch","e","preventDefault","toggleTemperatureUnit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","name","sys","country","main","temp","weather","description","humidity","wind","speed","list","slice","map","index","Date","dt","toLocaleDateString","onClick","_c","$RefreshReg$"],"sources":["/Users/ryanmexin/React Project website/To do list/src/components/Weather.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchWeatherData as fetchWeatherDataApi, fetchWeatherForecast as fetchWeatherForecastApi } from \"../utils/WeatherApi\"; // Import the API functions\nimport \"../Weather.css\"; // Optional styling for weather\n\nfunction Weather() {\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null); // To store forecast data\n  const [location, setLocation] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [isFahrenheit, setIsFahrenheit] = useState(false); // State to toggle between F and C\n\n  // Fetch weather data and forecast when the location is changed\n  useEffect(() => {\n    if (location) {\n      getWeatherData(location);\n      getWeatherForecast(location);\n    }\n  }, [location]);\n\n  // Function to fetch weather data\n  const getWeatherData = async (location) => {\n    try {\n      const data = await fetchWeatherDataApi(location);\n      setWeatherData(data);\n      setError(null); // Reset error state\n    } catch (err) {\n      setError(\"Error fetching weather data.\");\n      setWeatherData(null);\n    }\n  };\n\n  // Function to fetch weather forecast\n  const getWeatherForecast = async (location) => {\n    try {\n      const forecast = await fetchWeatherForecastApi(location);\n      console.log(\"Forecast Data:\", forecast); // Add logging to check the data\n      setForecastData(forecast);\n    } catch (err) {\n      setError(\"Error fetching forecast data.\");\n      setForecastData(null);\n    }\n  };\n\n  // Function to convert Celsius to Fahrenheit\n  const convertToFahrenheit = (celsius) => {\n    return (celsius * 9) / 5 + 32;\n  };\n\n  // Function to convert Fahrenheit to Celsius\n  const convertToCelsius = (fahrenheit) => {\n    return (fahrenheit - 32) * 5 / 9;\n  };\n\n  // Function to convert temperature correctly\n  const getTemperature = (tempCelsius) => {\n    if (isNaN(tempCelsius)) return \"N/A\"; // Handle invalid or missing data\n\n    // Convert temperature based on the selected unit\n    const temperature = isFahrenheit\n      ? convertToFahrenheit(tempCelsius)\n      : tempCelsius;\n\n    // Return temperature as-is if it is above 0; otherwise, keep it negative\n    return temperature > 0\n      ? temperature.toFixed(1)\n      : `(${Math.abs(temperature).toFixed(1)})`;\n  };\n\n  // Handle search form submission\n  const handleSearch = (e) => {\n    e.preventDefault();\n    if (location) {\n      getWeatherData(location);\n      getWeatherForecast(location);\n    }\n  };\n\n  // Toggle between Fahrenheit and Celsius\n  const toggleTemperatureUnit = () => {\n    setIsFahrenheit(!isFahrenheit);\n  };\n\n  return (\n    <div className=\"weather-container\">\n      <h2 className=\"weather-title\">Weather</h2>\n\n      <form onSubmit={handleSearch} className=\"weather-search-form\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter a city\"\n          value={location}\n          onChange={(e) => setLocation(e.target.value)}\n          className=\"weather-input\"\n        />\n        <button type=\"submit\" className=\"weather-search-btn\">\n          Search\n        </button>\n      </form>\n\n      {error && <p className=\"error-message\">{error}</p>}\n\n      {weatherData && (\n        <div className=\"weather-info\">\n          <h3>\n            {weatherData.name}, {weatherData.sys.country}\n          </h3>\n          <p>\n            Temperature: {getTemperature(weatherData.main.temp)}°\n            {isFahrenheit ? \"F\" : \"C\"}\n          </p>\n          <p>Conditions: {weatherData.weather[0].description}</p>\n          <p>Humidity: {weatherData.main.humidity}%</p>\n          <p>Wind Speed: {weatherData.wind.speed} m/s</p>\n        </div>\n      )}\n\n      {forecastData && (\n        <div className=\"weather-forecast\">\n          <h4>5-Day Forecast:</h4>\n          {forecastData.list.slice(0, 5).map((forecast, index) => {\n            const temp = forecast.main.temp; // Extract temperature (already in Celsius)\n            console.log(`Forecast Temp at index ${index}:`, temp); // Log the temperature to check\n\n            return (\n              <div key={index}>\n                <p>\n                  {new Date(forecast.dt * 1000).toLocaleDateString()} - \n                  {getTemperature(temp)}°{isFahrenheit ? \"F\" : \"C\"}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Toggle button to switch between Celsius and Fahrenheit */}\n      <button onClick={toggleTemperatureUnit} className=\"unit-toggle-btn\">\n        {isFahrenheit ? \"Switch to Celsius\" : \"Switch to Fahrenheit\"}\n      </button>\n    </div>\n  );\n}\n\nexport default Weather;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,IAAIC,mBAAmB,EAAEC,oBAAoB,IAAIC,uBAAuB,QAAQ,qBAAqB,CAAC,CAAC;AAChI,OAAO,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEzD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIa,QAAQ,EAAE;MACZM,cAAc,CAACN,QAAQ,CAAC;MACxBO,kBAAkB,CAACP,QAAQ,CAAC;IAC9B;EACF,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMM,cAAc,GAAG,MAAON,QAAQ,IAAK;IACzC,IAAI;MACF,MAAMQ,IAAI,GAAG,MAAMnB,mBAAmB,CAACW,QAAQ,CAAC;MAChDH,cAAc,CAACW,IAAI,CAAC;MACpBL,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZN,QAAQ,CAAC,8BAA8B,CAAC;MACxCN,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;;EAED;EACA,MAAMU,kBAAkB,GAAG,MAAOP,QAAQ,IAAK;IAC7C,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAMnB,uBAAuB,CAACS,QAAQ,CAAC;MACxDW,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAAC,CAAC,CAAC;MACzCX,eAAe,CAACW,QAAQ,CAAC;IAC3B,CAAC,CAAC,OAAOD,GAAG,EAAE;MACZN,QAAQ,CAAC,+BAA+B,CAAC;MACzCJ,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAMc,mBAAmB,GAAIC,OAAO,IAAK;IACvC,OAAQA,OAAO,GAAG,CAAC,GAAI,CAAC,GAAG,EAAE;EAC/B,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAIC,UAAU,IAAK;IACvC,OAAO,CAACA,UAAU,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;EAClC,CAAC;;EAED;EACA,MAAMC,cAAc,GAAIC,WAAW,IAAK;IACtC,IAAIC,KAAK,CAACD,WAAW,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC;;IAEtC;IACA,MAAME,WAAW,GAAGhB,YAAY,GAC5BS,mBAAmB,CAACK,WAAW,CAAC,GAChCA,WAAW;;IAEf;IACA,OAAOE,WAAW,GAAG,CAAC,GAClBA,WAAW,CAACC,OAAO,CAAC,CAAC,CAAC,GACtB,IAAIC,IAAI,CAACC,GAAG,CAACH,WAAW,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,GAAG;EAC7C,CAAC;;EAED;EACA,MAAMG,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI1B,QAAQ,EAAE;MACZM,cAAc,CAACN,QAAQ,CAAC;MACxBO,kBAAkB,CAACP,QAAQ,CAAC;IAC9B;EACF,CAAC;;EAED;EACA,MAAM2B,qBAAqB,GAAGA,CAAA,KAAM;IAClCtB,eAAe,CAAC,CAACD,YAAY,CAAC;EAChC,CAAC;EAED,oBACEX,OAAA;IAAKmC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCpC,OAAA;MAAImC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE1CxC,OAAA;MAAMyC,QAAQ,EAAEV,YAAa;MAACI,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAC3DpC,OAAA;QACE0C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,cAAc;QAC1BC,KAAK,EAAErC,QAAS;QAChBsC,QAAQ,EAAGb,CAAC,IAAKxB,WAAW,CAACwB,CAAC,CAACc,MAAM,CAACF,KAAK,CAAE;QAC7CT,SAAS,EAAC;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACFxC,OAAA;QAAQ0C,IAAI,EAAC,QAAQ;QAACP,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAErD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EAEN/B,KAAK,iBAAIT,OAAA;MAAGmC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAE3B;IAAK;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEjDrC,WAAW,iBACVH,OAAA;MAAKmC,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BpC,OAAA;QAAAoC,QAAA,GACGjC,WAAW,CAAC4C,IAAI,EAAC,IAAE,EAAC5C,WAAW,CAAC6C,GAAG,CAACC,OAAO;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CAAC,eACLxC,OAAA;QAAAoC,QAAA,GAAG,eACY,EAACZ,cAAc,CAACrB,WAAW,CAAC+C,IAAI,CAACC,IAAI,CAAC,EAAC,MACpD,EAACxC,YAAY,GAAG,GAAG,GAAG,GAAG;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACJxC,OAAA;QAAAoC,QAAA,GAAG,cAAY,EAACjC,WAAW,CAACiD,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;MAAA;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvDxC,OAAA;QAAAoC,QAAA,GAAG,YAAU,EAACjC,WAAW,CAAC+C,IAAI,CAACI,QAAQ,EAAC,GAAC;MAAA;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC7CxC,OAAA;QAAAoC,QAAA,GAAG,cAAY,EAACjC,WAAW,CAACoD,IAAI,CAACC,KAAK,EAAC,MAAI;MAAA;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CACN,EAEAnC,YAAY,iBACXL,OAAA;MAAKmC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BpC,OAAA;QAAAoC,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACvBnC,YAAY,CAACoD,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC1C,QAAQ,EAAE2C,KAAK,KAAK;QACtD,MAAMT,IAAI,GAAGlC,QAAQ,CAACiC,IAAI,CAACC,IAAI,CAAC,CAAC;QACjCjC,OAAO,CAACC,GAAG,CAAC,0BAA0ByC,KAAK,GAAG,EAAET,IAAI,CAAC,CAAC,CAAC;;QAEvD,oBACEnD,OAAA;UAAAoC,QAAA,eACEpC,OAAA;YAAAoC,QAAA,GACG,IAAIyB,IAAI,CAAC5C,QAAQ,CAAC6C,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC,EAAC,IACnD,EAACvC,cAAc,CAAC2B,IAAI,CAAC,EAAC,MAAC,EAACxC,YAAY,GAAG,GAAG,GAAG,GAAG;UAAA;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C;QAAC,GAJIoB,KAAK;UAAAvB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKV,CAAC;MAEV,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,eAGDxC,OAAA;MAAQgE,OAAO,EAAE9B,qBAAsB;MAACC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAChEzB,YAAY,GAAG,mBAAmB,GAAG;IAAsB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACtC,EAAA,CAzIQD,OAAO;AAAAgE,EAAA,GAAPhE,OAAO;AA2IhB,eAAeA,OAAO;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}